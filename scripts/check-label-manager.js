// @ts-check
/**
 * Script ƒë·ªÉ ki·ªÉm tra Label Manager trong database
 * Ch·∫°y: node scripts/check-label-manager.js
 */
import {
    connectToDatabase,
    checkTableExists,
    getTableStructure
} from './utils/db-helper.js';
import { loadEnvVariables, logToFile } from './utils/env-loader.js';

// Load environment variables
loadEnvVariables();

/**
 * Ki·ªÉm tra Label Manager trong database
 */
async function checkLabelManager() {
    console.log('üîç Ki·ªÉm tra Label Manager...');
    console.log('='.repeat(50));

    try {
        // K·∫øt n·ªëi database
        const sql = await connectToDatabase();

        // Ki·ªÉm tra b·∫£ng label_manager t·ªìn t·∫°i kh√¥ng
        await checkLabelManagerTable();

        // Ki·ªÉm tra user trong b·∫£ng
        const labelManagers = await findLabelManagers(sql);

        // Ki·ªÉm tra quy·ªÅn
        await checkPermissions(sql);

        // Ki·ªÉm tra ho·∫°t ƒë·ªông
        await checkRecentActivity(sql);

        // T·ªïng k·∫øt
        console.log('\n=== T·ªïng K·∫øt ===');
        console.log(`‚úÖ T·ªïng s·ªë Label Manager: ${labelManagers?.length || 0}`);
        console.log('\n‚úÖ Ki·ªÉm tra ho√†n t·∫•t!');
        console.log('ƒê√£ ghi log v√†o th∆∞ m·ª•c logs/');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        await logToFile(`Error: ${error.message}`, 'label-manager-check.log');
    }
}

/**
 * Ki·ªÉm tra b·∫£ng label_manager t·ªìn t·∫°i kh√¥ng
 */
async function checkLabelManagerTable() {
    // Ki·ªÉm tra b·∫£ng label_manager t·ªìn t·∫°i kh√¥ng
    const tableExists = await checkTableExists('label_manager');

    if (!tableExists) {
        console.error('‚ùå B·∫£ng label_manager kh√¥ng t·ªìn t·∫°i trong database!');
        await logToFile('B·∫£ng label_manager kh√¥ng t·ªìn t·∫°i', 'label-manager-check.log');
        return false;
    }

    console.log('‚úÖ B·∫£ng label_manager t·ªìn t·∫°i');

    // L·∫•y c·∫•u tr√∫c b·∫£ng
    const columns = await getTableStructure('label_manager');

    console.log('\n=== C·∫•u tr√∫c b·∫£ng label_manager ===');
    columns.forEach(col => {
        console.log(`- ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
    });

    return true;
}

/**
 * T√¨m Label Manager trong database
 */
async function findLabelManagers(sql) {
    // Ki·ªÉm tra user trong b·∫£ng label_manager
    console.log('\n=== Ki·ªÉm tra Label Manager ===');
    const labelManagers = await sql`
        SELECT * FROM public.label_manager
        WHERE username = 'ankunstudio'
    `;

    if (labelManagers.length > 0) {
        console.log('‚úÖ T√¨m th·∫•y Label Manager:');
        for (const manager of labelManagers) {
            console.log(`- Username: ${manager.username}`);
            console.log(`  Email: ${manager.email}`);
            console.log(`  Role: ${manager.role}`);
            console.log(`  Created: ${manager.created_at}`);
            console.log('-'.repeat(40));
        }

        await logToFile(`T√¨m th·∫•y ${labelManagers.length} Label Manager`, 'label-manager-check.log');
    } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y Label Manager n√†o');
        await logToFile('Kh√¥ng t√¨m th·∫•y Label Manager', 'label-manager-check.log');
    }

    return labelManagers;
}

/**
 * Ki·ªÉm tra quy·ªÅn c·ªßa Label Manager
 */
async function checkPermissions(sql) {
    console.log('\n=== Ki·ªÉm tra Quy·ªÅn Label Manager ===');

    try {
        const managerData = await sql`
            SELECT * FROM public.label_manager 
            WHERE username = 'ankunstudio'
        `;

        if (managerData.length === 0) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y Label Manager ƒë·ªÉ ki·ªÉm tra quy·ªÅn');
            return;
        }

        const manager = managerData[0];
        console.log('Th√¥ng tin Label Manager:');
        console.log(`- Username: ${manager.username}`);
        console.log(`- Email: ${manager.email}`);

        // Ki·ªÉm tra tr∆∞·ªùng permissions JSON
        await checkPermissionsField(manager);

        // Hi·ªÉn th·ªã t·∫•t c·∫£ thu·ªôc t√≠nh ƒë·ªÉ ki·ªÉm tra
        console.log('\nT·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa Label Manager:');
        for (const [key, value] of Object.entries(manager)) {
            console.log(`- ${key}: ${JSON.stringify(value)}`);
        }
    } catch (error) {
        console.error(`‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn: ${error.message}`);
        await logToFile(`‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn: ${error.message}`, 'label-manager-check.log');
    }
}

/**
 * Ki·ªÉm tra tr∆∞·ªùng permissions JSON
 */
async function checkPermissionsField(manager) {
    if (!manager.permissions) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng permissions trong d·ªØ li·ªáu');
        // Ki·ªÉm tra c√°c tr∆∞·ªùng kh√°c c√≥ th·ªÉ ch·ª©a th√¥ng tin quy·ªÅn
        searchPotentialPermissionFields(manager);
        return;
    }

    console.log(`- Permissions raw: ${JSON.stringify(manager.permissions)}`);

    // Ph√¢n t√≠ch JSON permissions
    try {
        const permObj = typeof manager.permissions === 'string'
            ? JSON.parse(manager.permissions)
            : manager.permissions;

        console.log(`- Permissions parsed: ${JSON.stringify(permObj)}`);

        if (permObj.role === 'admin' && permObj.access === 'all') {
            console.log('‚úÖ T√†i kho·∫£n c√≥ quy·ªÅn admin h·ª£p l·ªá {"role": "admin", "access": "all"}');
            await logToFile('‚úÖ T√†i kho·∫£n c√≥ quy·ªÅn admin h·ª£p l·ªá', 'label-manager-check.log');
        } else {
            console.log(`‚ö†Ô∏è Quy·ªÅn kh√¥ng kh·ªõp v·ªõi {"role": "admin", "access": "all"}`);
            await logToFile(`‚ö†Ô∏è Quy·ªÅn kh√¥ng kh·ªõp v·ªõi {"role": "admin", "access": "all"}`, 'label-manager-check.log');
        }
    } catch (e) {
        console.error(`‚ùå L·ªói khi ph√¢n t√≠ch permissions: ${e.message}`);
        await logToFile(`‚ùå L·ªói khi ph√¢n t√≠ch permissions: ${e.message}`, 'label-manager-check.log');
    }
}

/**
 * T√¨m ki·∫øm c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a th√¥ng tin quy·ªÅn
 */
function searchPotentialPermissionFields(manager) {
    for (const [key, value] of Object.entries(manager)) {
        if (typeof value === 'object' || (typeof value === 'string' && value.includes('admin'))) {
            console.log(`- C√≥ th·ªÉ ch·ª©a quy·ªÅn trong tr∆∞·ªùng "${key}": ${JSON.stringify(value)}`);
        }
    }
}

/**
 * Ki·ªÉm tra ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
 */
async function checkRecentActivity(sql) {
    console.log('\n=== Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y ===');
    try {
        const recentActivity = await sql`
            SELECT * FROM public.activity_log 
            WHERE username = 'ankunstudio'
            ORDER BY created_at DESC
            LIMIT 5
        `;

        if (recentActivity && recentActivity.length > 0) {
            console.log('Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y:');
            recentActivity.forEach(activity => {
                console.log(`- ${activity.username}: ${activity.action} (${activity.created_at})`);
            });
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y.');
        }
    } catch (activityError) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ truy v·∫•n ho·∫°t ƒë·ªông: ${activityError.message}`);
        await logToFile(`Kh√¥ng th·ªÉ truy v·∫•n ho·∫°t ƒë·ªông: ${activityError.message}`, 'label-manager-check.log');
    }
}

// Export functions - ES Module compatible
export { checkLabelManager };

// Auto-run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
    checkLabelManager().catch(console.error);
}
